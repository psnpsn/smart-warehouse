package tn.esprit.MSConditions.controller;

import java.sql.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import tn.esprit.MSConditions.entity.Environment;
import tn.esprit.MSConditions.repository.EnvironmentRepository;
import tn.esprit.MSConditions.service.EnvironmentService;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class EnvironmentController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private EnvironmentRepository environmentRepository;
  
  @Autowired
	private EnvironmentService envService;
  
  
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewEnvironment (@RequestParam double temperature
      , @RequestParam double humidity) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Environment n = new Environment();
    n.setTemperature(temperature);
    n.setHumidity(humidity);
    n.setReading_time(new Timestamp(System.currentTimeMillis()));
    //System.out.println((new Timestamp(System.currentTimeMillis())));
    environmentRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Environment> getAllUsers() {
    // This returns a JSON or XML with the users
    return environmentRepository.findAll();
  }
  
  @DeleteMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	public ResponseEntity<Environment> deleteCandidat(@PathVariable(value = "id") int id){
		envService.deleteCandidat(id);
		return new ResponseEntity<>(HttpStatus.OK);
		
	}
	
	
	

}